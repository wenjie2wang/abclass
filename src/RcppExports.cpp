// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/abclass.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// r_boost_glasso
Rcpp::List r_boost_glasso(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double boost_umin);
RcppExport SEXP _abclass_r_boost_glasso(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP boost_uminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type boost_umin(boost_uminSEXP);
    rcpp_result_gen = Rcpp::wrap(r_boost_glasso(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, boost_umin));
    return rcpp_result_gen;
END_RCPP
}
// r_boost_glasso_sp
Rcpp::List r_boost_glasso_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double boost_umin);
RcppExport SEXP _abclass_r_boost_glasso_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP boost_uminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type boost_umin(boost_uminSEXP);
    rcpp_result_gen = Rcpp::wrap(r_boost_glasso_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, boost_umin));
    return rcpp_result_gen;
END_RCPP
}
// r_boost_gmcp
Rcpp::List r_boost_gmcp(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double boost_umin);
RcppExport SEXP _abclass_r_boost_gmcp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP boost_uminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type boost_umin(boost_uminSEXP);
    rcpp_result_gen = Rcpp::wrap(r_boost_gmcp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, boost_umin));
    return rcpp_result_gen;
END_RCPP
}
// r_boost_gmcp_sp
Rcpp::List r_boost_gmcp_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double boost_umin);
RcppExport SEXP _abclass_r_boost_gmcp_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP boost_uminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type boost_umin(boost_uminSEXP);
    rcpp_result_gen = Rcpp::wrap(r_boost_gmcp_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, boost_umin));
    return rcpp_result_gen;
END_RCPP
}
// r_boost_gscad
Rcpp::List r_boost_gscad(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double boost_umin);
RcppExport SEXP _abclass_r_boost_gscad(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP boost_uminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type boost_umin(boost_uminSEXP);
    rcpp_result_gen = Rcpp::wrap(r_boost_gscad(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, boost_umin));
    return rcpp_result_gen;
END_RCPP
}
// r_boost_gscad_sp
Rcpp::List r_boost_gscad_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double boost_umin);
RcppExport SEXP _abclass_r_boost_gscad_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP boost_uminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type boost_umin(boost_uminSEXP);
    rcpp_result_gen = Rcpp::wrap(r_boost_gscad_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, boost_umin));
    return rcpp_result_gen;
END_RCPP
}
// r_boost_net
Rcpp::List r_boost_net(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double boost_umin);
RcppExport SEXP _abclass_r_boost_net(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP boost_uminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type boost_umin(boost_uminSEXP);
    rcpp_result_gen = Rcpp::wrap(r_boost_net(x, y, lambda, alpha, nlambda, lambda_min_ratio, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, boost_umin));
    return rcpp_result_gen;
END_RCPP
}
// r_boost_net_sp
Rcpp::List r_boost_net_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double boost_umin);
RcppExport SEXP _abclass_r_boost_net_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP boost_uminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type boost_umin(boost_uminSEXP);
    rcpp_result_gen = Rcpp::wrap(r_boost_net_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, boost_umin));
    return rcpp_result_gen;
END_RCPP
}
// cv_samples
Rcpp::List cv_samples(const unsigned int nobs, const unsigned int nfolds, const arma::uvec& strata);
RcppExport SEXP _abclass_cv_samples(SEXP nobsSEXP, SEXP nfoldsSEXP, SEXP strataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type strata(strataSEXP);
    rcpp_result_gen = Rcpp::wrap(cv_samples(nobs, nfolds, strata));
    return rcpp_result_gen;
END_RCPP
}
// r_hinge_boost_glasso
Rcpp::List r_hinge_boost_glasso(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_c);
RcppExport SEXP _abclass_r_hinge_boost_glasso(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_hinge_boost_glasso(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_hinge_boost_glasso_sp
Rcpp::List r_hinge_boost_glasso_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_c);
RcppExport SEXP _abclass_r_hinge_boost_glasso_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_hinge_boost_glasso_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_hinge_boost_gmcp
Rcpp::List r_hinge_boost_gmcp(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_c);
RcppExport SEXP _abclass_r_hinge_boost_gmcp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_hinge_boost_gmcp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_hinge_boost_gmcp_sp
Rcpp::List r_hinge_boost_gmcp_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_c);
RcppExport SEXP _abclass_r_hinge_boost_gmcp_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_hinge_boost_gmcp_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_hinge_boost_gscad
Rcpp::List r_hinge_boost_gscad(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_c);
RcppExport SEXP _abclass_r_hinge_boost_gscad(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_hinge_boost_gscad(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_hinge_boost_gscad_sp
Rcpp::List r_hinge_boost_gscad_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_c);
RcppExport SEXP _abclass_r_hinge_boost_gscad_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_hinge_boost_gscad_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_hinge_boost_net
Rcpp::List r_hinge_boost_net(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_c);
RcppExport SEXP _abclass_r_hinge_boost_net(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_hinge_boost_net(x, y, lambda, alpha, nlambda, lambda_min_ratio, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_hinge_boost_net_sp
Rcpp::List r_hinge_boost_net_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_c);
RcppExport SEXP _abclass_r_hinge_boost_net_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_hinge_boost_net_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_logistic_glasso
Rcpp::List r_logistic_glasso(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit);
RcppExport SEXP _abclass_r_logistic_glasso(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    rcpp_result_gen = Rcpp::wrap(r_logistic_glasso(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit));
    return rcpp_result_gen;
END_RCPP
}
// r_logistic_glasso_sp
Rcpp::List r_logistic_glasso_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit);
RcppExport SEXP _abclass_r_logistic_glasso_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    rcpp_result_gen = Rcpp::wrap(r_logistic_glasso_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit));
    return rcpp_result_gen;
END_RCPP
}
// r_logistic_gmcp
Rcpp::List r_logistic_gmcp(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit);
RcppExport SEXP _abclass_r_logistic_gmcp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    rcpp_result_gen = Rcpp::wrap(r_logistic_gmcp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit));
    return rcpp_result_gen;
END_RCPP
}
// r_logistic_gmcp_sp
Rcpp::List r_logistic_gmcp_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit);
RcppExport SEXP _abclass_r_logistic_gmcp_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    rcpp_result_gen = Rcpp::wrap(r_logistic_gmcp_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit));
    return rcpp_result_gen;
END_RCPP
}
// r_logistic_gscad
Rcpp::List r_logistic_gscad(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit);
RcppExport SEXP _abclass_r_logistic_gscad(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    rcpp_result_gen = Rcpp::wrap(r_logistic_gscad(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit));
    return rcpp_result_gen;
END_RCPP
}
// r_logistic_gscad_sp
Rcpp::List r_logistic_gscad_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit);
RcppExport SEXP _abclass_r_logistic_gscad_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    rcpp_result_gen = Rcpp::wrap(r_logistic_gscad_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit));
    return rcpp_result_gen;
END_RCPP
}
// r_logistic_net
Rcpp::List r_logistic_net(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit);
RcppExport SEXP _abclass_r_logistic_net(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    rcpp_result_gen = Rcpp::wrap(r_logistic_net(x, y, lambda, alpha, nlambda, lambda_min_ratio, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit));
    return rcpp_result_gen;
END_RCPP
}
// r_logistic_net_sp
Rcpp::List r_logistic_net_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit);
RcppExport SEXP _abclass_r_logistic_net_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    rcpp_result_gen = Rcpp::wrap(r_logistic_net_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit));
    return rcpp_result_gen;
END_RCPP
}
// r_lum_glasso
Rcpp::List r_lum_glasso(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_a, const double lum_c);
RcppExport SEXP _abclass_r_lum_glasso(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_aSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_a(lum_aSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_lum_glasso(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_a, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_lum_glasso_sp
Rcpp::List r_lum_glasso_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_a, const double lum_c);
RcppExport SEXP _abclass_r_lum_glasso_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_aSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_a(lum_aSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_lum_glasso_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_a, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_lum_gmcp
Rcpp::List r_lum_gmcp(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_a, const double lum_c);
RcppExport SEXP _abclass_r_lum_gmcp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_aSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_a(lum_aSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_lum_gmcp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_a, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_lum_gmcp_sp
Rcpp::List r_lum_gmcp_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_a, const double lum_c);
RcppExport SEXP _abclass_r_lum_gmcp_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_aSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_a(lum_aSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_lum_gmcp_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_a, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_lum_gscad
Rcpp::List r_lum_gscad(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_a, const double lum_c);
RcppExport SEXP _abclass_r_lum_gscad(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_aSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_a(lum_aSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_lum_gscad(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_a, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_lum_gscad_sp
Rcpp::List r_lum_gscad_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const double dgamma, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_a, const double lum_c);
RcppExport SEXP _abclass_r_lum_gscad_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP dgammaSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_aSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type dgamma(dgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_a(lum_aSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_lum_gscad_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, group_weight, dgamma, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_a, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_lum_net
Rcpp::List r_lum_net(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_a, const double lum_c);
RcppExport SEXP _abclass_r_lum_net(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_aSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_a(lum_aSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_lum_net(x, y, lambda, alpha, nlambda, lambda_min_ratio, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_a, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_lum_net_sp
Rcpp::List r_lum_net_sp(const arma::sp_mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int maxit, const double epsilon, const bool varying_active_set, const unsigned int verbose, const unsigned int nfolds, const bool stratified, const unsigned int alignment, const unsigned int nstages, const bool main_fit, const double lum_a, const double lum_c);
RcppExport SEXP _abclass_r_lum_net_sp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP maxitSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP, SEXP nfoldsSEXP, SEXP stratifiedSEXP, SEXP alignmentSEXP, SEXP nstagesSEXP, SEXP main_fitSEXP, SEXP lum_aSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified(stratifiedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type alignment(alignmentSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nstages(nstagesSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_fit(main_fitSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_a(lum_aSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(r_lum_net_sp(x, y, lambda, alpha, nlambda, lambda_min_ratio, weight, intercept, standardize, maxit, epsilon, varying_active_set, verbose, nfolds, stratified, alignment, nstages, main_fit, lum_a, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// r_logistic_pred_prob
arma::mat r_logistic_pred_prob(const arma::mat& beta, const arma::mat& x);
RcppExport SEXP _abclass_r_logistic_pred_prob(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_logistic_pred_prob(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// r_logistic_pred_prob_sp
arma::mat r_logistic_pred_prob_sp(const arma::mat& beta, const arma::sp_mat& x);
RcppExport SEXP _abclass_r_logistic_pred_prob_sp(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_logistic_pred_prob_sp(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// r_logistic_pred_y
arma::uvec r_logistic_pred_y(const arma::mat& beta, const arma::mat& x);
RcppExport SEXP _abclass_r_logistic_pred_y(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_logistic_pred_y(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// r_logistic_pred_y_sp
arma::uvec r_logistic_pred_y_sp(const arma::mat& beta, const arma::sp_mat& x);
RcppExport SEXP _abclass_r_logistic_pred_y_sp(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_logistic_pred_y_sp(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// r_boost_pred_prob
arma::mat r_boost_pred_prob(const arma::mat& beta, const arma::mat& x);
RcppExport SEXP _abclass_r_boost_pred_prob(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_boost_pred_prob(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// r_boost_pred_prob_sp
arma::mat r_boost_pred_prob_sp(const arma::mat& beta, const arma::sp_mat& x);
RcppExport SEXP _abclass_r_boost_pred_prob_sp(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_boost_pred_prob_sp(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// r_boost_pred_y
arma::uvec r_boost_pred_y(const arma::mat& beta, const arma::mat& x);
RcppExport SEXP _abclass_r_boost_pred_y(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_boost_pred_y(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// r_boost_pred_y_sp
arma::uvec r_boost_pred_y_sp(const arma::mat& beta, const arma::sp_mat& x);
RcppExport SEXP _abclass_r_boost_pred_y_sp(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_boost_pred_y_sp(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// r_hinge_boost_pred_prob
arma::mat r_hinge_boost_pred_prob(const arma::mat& beta, const arma::mat& x);
RcppExport SEXP _abclass_r_hinge_boost_pred_prob(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_hinge_boost_pred_prob(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// r_hinge_boost_pred_prob_sp
arma::mat r_hinge_boost_pred_prob_sp(const arma::mat& beta, const arma::sp_mat& x);
RcppExport SEXP _abclass_r_hinge_boost_pred_prob_sp(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_hinge_boost_pred_prob_sp(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// r_hinge_boost_pred_y
arma::uvec r_hinge_boost_pred_y(const arma::mat& beta, const arma::mat& x);
RcppExport SEXP _abclass_r_hinge_boost_pred_y(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_hinge_boost_pred_y(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// r_hinge_boost_pred_y_sp
arma::uvec r_hinge_boost_pred_y_sp(const arma::mat& beta, const arma::sp_mat& x);
RcppExport SEXP _abclass_r_hinge_boost_pred_y_sp(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_hinge_boost_pred_y_sp(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// r_lum_pred_prob
arma::mat r_lum_pred_prob(const arma::mat& beta, const arma::mat& x);
RcppExport SEXP _abclass_r_lum_pred_prob(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_lum_pred_prob(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// r_lum_pred_prob_sp
arma::mat r_lum_pred_prob_sp(const arma::mat& beta, const arma::sp_mat& x);
RcppExport SEXP _abclass_r_lum_pred_prob_sp(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_lum_pred_prob_sp(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// r_lum_pred_y
arma::uvec r_lum_pred_y(const arma::mat& beta, const arma::mat& x);
RcppExport SEXP _abclass_r_lum_pred_y(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_lum_pred_y(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// r_lum_pred_y_sp
arma::uvec r_lum_pred_y_sp(const arma::mat& beta, const arma::sp_mat& x);
RcppExport SEXP _abclass_r_lum_pred_y_sp(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r_lum_pred_y_sp(beta, x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_abclass_r_boost_glasso", (DL_FUNC) &_abclass_r_boost_glasso, 20},
    {"_abclass_r_boost_glasso_sp", (DL_FUNC) &_abclass_r_boost_glasso_sp, 20},
    {"_abclass_r_boost_gmcp", (DL_FUNC) &_abclass_r_boost_gmcp, 21},
    {"_abclass_r_boost_gmcp_sp", (DL_FUNC) &_abclass_r_boost_gmcp_sp, 21},
    {"_abclass_r_boost_gscad", (DL_FUNC) &_abclass_r_boost_gscad, 21},
    {"_abclass_r_boost_gscad_sp", (DL_FUNC) &_abclass_r_boost_gscad_sp, 21},
    {"_abclass_r_boost_net", (DL_FUNC) &_abclass_r_boost_net, 19},
    {"_abclass_r_boost_net_sp", (DL_FUNC) &_abclass_r_boost_net_sp, 19},
    {"_abclass_cv_samples", (DL_FUNC) &_abclass_cv_samples, 3},
    {"_abclass_r_hinge_boost_glasso", (DL_FUNC) &_abclass_r_hinge_boost_glasso, 20},
    {"_abclass_r_hinge_boost_glasso_sp", (DL_FUNC) &_abclass_r_hinge_boost_glasso_sp, 20},
    {"_abclass_r_hinge_boost_gmcp", (DL_FUNC) &_abclass_r_hinge_boost_gmcp, 21},
    {"_abclass_r_hinge_boost_gmcp_sp", (DL_FUNC) &_abclass_r_hinge_boost_gmcp_sp, 21},
    {"_abclass_r_hinge_boost_gscad", (DL_FUNC) &_abclass_r_hinge_boost_gscad, 21},
    {"_abclass_r_hinge_boost_gscad_sp", (DL_FUNC) &_abclass_r_hinge_boost_gscad_sp, 21},
    {"_abclass_r_hinge_boost_net", (DL_FUNC) &_abclass_r_hinge_boost_net, 19},
    {"_abclass_r_hinge_boost_net_sp", (DL_FUNC) &_abclass_r_hinge_boost_net_sp, 19},
    {"_abclass_r_logistic_glasso", (DL_FUNC) &_abclass_r_logistic_glasso, 19},
    {"_abclass_r_logistic_glasso_sp", (DL_FUNC) &_abclass_r_logistic_glasso_sp, 19},
    {"_abclass_r_logistic_gmcp", (DL_FUNC) &_abclass_r_logistic_gmcp, 20},
    {"_abclass_r_logistic_gmcp_sp", (DL_FUNC) &_abclass_r_logistic_gmcp_sp, 20},
    {"_abclass_r_logistic_gscad", (DL_FUNC) &_abclass_r_logistic_gscad, 20},
    {"_abclass_r_logistic_gscad_sp", (DL_FUNC) &_abclass_r_logistic_gscad_sp, 20},
    {"_abclass_r_logistic_net", (DL_FUNC) &_abclass_r_logistic_net, 18},
    {"_abclass_r_logistic_net_sp", (DL_FUNC) &_abclass_r_logistic_net_sp, 18},
    {"_abclass_r_lum_glasso", (DL_FUNC) &_abclass_r_lum_glasso, 21},
    {"_abclass_r_lum_glasso_sp", (DL_FUNC) &_abclass_r_lum_glasso_sp, 21},
    {"_abclass_r_lum_gmcp", (DL_FUNC) &_abclass_r_lum_gmcp, 22},
    {"_abclass_r_lum_gmcp_sp", (DL_FUNC) &_abclass_r_lum_gmcp_sp, 22},
    {"_abclass_r_lum_gscad", (DL_FUNC) &_abclass_r_lum_gscad, 22},
    {"_abclass_r_lum_gscad_sp", (DL_FUNC) &_abclass_r_lum_gscad_sp, 22},
    {"_abclass_r_lum_net", (DL_FUNC) &_abclass_r_lum_net, 20},
    {"_abclass_r_lum_net_sp", (DL_FUNC) &_abclass_r_lum_net_sp, 20},
    {"_abclass_r_logistic_pred_prob", (DL_FUNC) &_abclass_r_logistic_pred_prob, 2},
    {"_abclass_r_logistic_pred_prob_sp", (DL_FUNC) &_abclass_r_logistic_pred_prob_sp, 2},
    {"_abclass_r_logistic_pred_y", (DL_FUNC) &_abclass_r_logistic_pred_y, 2},
    {"_abclass_r_logistic_pred_y_sp", (DL_FUNC) &_abclass_r_logistic_pred_y_sp, 2},
    {"_abclass_r_boost_pred_prob", (DL_FUNC) &_abclass_r_boost_pred_prob, 2},
    {"_abclass_r_boost_pred_prob_sp", (DL_FUNC) &_abclass_r_boost_pred_prob_sp, 2},
    {"_abclass_r_boost_pred_y", (DL_FUNC) &_abclass_r_boost_pred_y, 2},
    {"_abclass_r_boost_pred_y_sp", (DL_FUNC) &_abclass_r_boost_pred_y_sp, 2},
    {"_abclass_r_hinge_boost_pred_prob", (DL_FUNC) &_abclass_r_hinge_boost_pred_prob, 2},
    {"_abclass_r_hinge_boost_pred_prob_sp", (DL_FUNC) &_abclass_r_hinge_boost_pred_prob_sp, 2},
    {"_abclass_r_hinge_boost_pred_y", (DL_FUNC) &_abclass_r_hinge_boost_pred_y, 2},
    {"_abclass_r_hinge_boost_pred_y_sp", (DL_FUNC) &_abclass_r_hinge_boost_pred_y_sp, 2},
    {"_abclass_r_lum_pred_prob", (DL_FUNC) &_abclass_r_lum_pred_prob, 2},
    {"_abclass_r_lum_pred_prob_sp", (DL_FUNC) &_abclass_r_lum_pred_prob_sp, 2},
    {"_abclass_r_lum_pred_y", (DL_FUNC) &_abclass_r_lum_pred_y, 2},
    {"_abclass_r_lum_pred_y_sp", (DL_FUNC) &_abclass_r_lum_pred_y_sp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_abclass(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

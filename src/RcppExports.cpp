// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/abclass.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_boost_glasso
Rcpp::List rcpp_boost_glasso(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int nfolds, const bool stratified_cv, const unsigned int max_iter, const double epsilon, const bool varying_active_set, const double inner_min, const unsigned int verbose);
RcppExport SEXP _abclass_rcpp_boost_glasso(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP nfoldsSEXP, SEXP stratified_cvSEXP, SEXP max_iterSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP inner_minSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified_cv(stratified_cvSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const double >::type inner_min(inner_minSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_boost_glasso(x, y, lambda, nlambda, lambda_min_ratio, group_weight, weight, intercept, standardize, nfolds, stratified_cv, max_iter, epsilon, varying_active_set, inner_min, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_boost_net
Rcpp::List rcpp_boost_net(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int nfolds, const bool stratified_cv, const unsigned int max_iter, const double epsilon, const bool varying_active_set, const double inner_min, const unsigned int verbose);
RcppExport SEXP _abclass_rcpp_boost_net(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP nfoldsSEXP, SEXP stratified_cvSEXP, SEXP max_iterSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP inner_minSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified_cv(stratified_cvSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const double >::type inner_min(inner_minSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_boost_net(x, y, lambda, alpha, nlambda, lambda_min_ratio, weight, intercept, standardize, nfolds, stratified_cv, max_iter, epsilon, varying_active_set, inner_min, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hinge_boost_glasso
Rcpp::List rcpp_hinge_boost_glasso(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int nfolds, const bool stratified_cv, const unsigned int max_iter, const double epsilon, const bool varying_active_set, const double lum_c, const unsigned int verbose);
RcppExport SEXP _abclass_rcpp_hinge_boost_glasso(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP nfoldsSEXP, SEXP stratified_cvSEXP, SEXP max_iterSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP lum_cSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified_cv(stratified_cvSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_hinge_boost_glasso(x, y, lambda, nlambda, lambda_min_ratio, group_weight, weight, intercept, standardize, nfolds, stratified_cv, max_iter, epsilon, varying_active_set, lum_c, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hinge_boost_net
Rcpp::List rcpp_hinge_boost_net(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int nfolds, const bool stratified_cv, const unsigned int max_iter, const double epsilon, const bool varying_active_set, const double lum_c, const unsigned int verbose);
RcppExport SEXP _abclass_rcpp_hinge_boost_net(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP nfoldsSEXP, SEXP stratified_cvSEXP, SEXP max_iterSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP lum_cSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified_cv(stratified_cvSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_hinge_boost_net(x, y, lambda, alpha, nlambda, lambda_min_ratio, weight, intercept, standardize, nfolds, stratified_cv, max_iter, epsilon, varying_active_set, lum_c, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_logistic_glasso
Rcpp::List rcpp_logistic_glasso(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int nfolds, const bool stratified_cv, const unsigned int max_iter, const double epsilon, const bool varying_active_set, const unsigned int verbose);
RcppExport SEXP _abclass_rcpp_logistic_glasso(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP nfoldsSEXP, SEXP stratified_cvSEXP, SEXP max_iterSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified_cv(stratified_cvSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_logistic_glasso(x, y, lambda, nlambda, lambda_min_ratio, group_weight, weight, intercept, standardize, nfolds, stratified_cv, max_iter, epsilon, varying_active_set, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_logistic_net
Rcpp::List rcpp_logistic_net(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int nfolds, const bool stratified_cv, const unsigned int max_iter, const double epsilon, const bool varying_active_set, const unsigned int verbose);
RcppExport SEXP _abclass_rcpp_logistic_net(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP nfoldsSEXP, SEXP stratified_cvSEXP, SEXP max_iterSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified_cv(stratified_cvSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_logistic_net(x, y, lambda, alpha, nlambda, lambda_min_ratio, weight, intercept, standardize, nfolds, stratified_cv, max_iter, epsilon, varying_active_set, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_lum_glasso
Rcpp::List rcpp_lum_glasso(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& group_weight, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int nfolds, const bool stratified_cv, const unsigned int max_iter, const double epsilon, const bool varying_active_set, const double lum_a, const double lum_c, const unsigned int verbose);
RcppExport SEXP _abclass_rcpp_lum_glasso(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP group_weightSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP nfoldsSEXP, SEXP stratified_cvSEXP, SEXP max_iterSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP lum_aSEXP, SEXP lum_cSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified_cv(stratified_cvSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_a(lum_aSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_lum_glasso(x, y, lambda, nlambda, lambda_min_ratio, group_weight, weight, intercept, standardize, nfolds, stratified_cv, max_iter, epsilon, varying_active_set, lum_a, lum_c, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_lum_net
Rcpp::List rcpp_lum_net(const arma::mat& x, const arma::uvec& y, const arma::vec& lambda, const double alpha, const unsigned int nlambda, const double lambda_min_ratio, const arma::vec& weight, const bool intercept, const bool standardize, const unsigned int nfolds, const bool stratified_cv, const unsigned int max_iter, const double epsilon, const bool varying_active_set, const double lum_a, const double lum_c, const unsigned int verbose);
RcppExport SEXP _abclass_rcpp_lum_net(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP weightSEXP, SEXP interceptSEXP, SEXP standardizeSEXP, SEXP nfoldsSEXP, SEXP stratified_cvSEXP, SEXP max_iterSEXP, SEXP epsilonSEXP, SEXP varying_active_setSEXP, SEXP lum_aSEXP, SEXP lum_cSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type stratified_cv(stratified_cvSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type varying_active_set(varying_active_setSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_a(lum_aSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_lum_net(x, y, lambda, alpha, nlambda, lambda_min_ratio, weight, intercept, standardize, nfolds, stratified_cv, max_iter, epsilon, varying_active_set, lum_a, lum_c, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_logistic_predict_prob
arma::mat rcpp_logistic_predict_prob(const arma::mat& beta, const arma::mat& x);
RcppExport SEXP _abclass_rcpp_logistic_predict_prob(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_logistic_predict_prob(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_logistic_predict_y
arma::uvec rcpp_logistic_predict_y(const arma::mat& beta, const arma::mat& x);
RcppExport SEXP _abclass_rcpp_logistic_predict_y(SEXP betaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_logistic_predict_y(beta, x));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_boost_predict_prob
arma::mat rcpp_boost_predict_prob(const arma::mat& beta, const arma::mat& x, const double inner_min);
RcppExport SEXP _abclass_rcpp_boost_predict_prob(SEXP betaSEXP, SEXP xSEXP, SEXP inner_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type inner_min(inner_minSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_boost_predict_prob(beta, x, inner_min));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_boost_predict_y
arma::uvec rcpp_boost_predict_y(const arma::mat& beta, const arma::mat& x, const double inner_min);
RcppExport SEXP _abclass_rcpp_boost_predict_y(SEXP betaSEXP, SEXP xSEXP, SEXP inner_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type inner_min(inner_minSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_boost_predict_y(beta, x, inner_min));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hinge_boost_predict_prob
arma::mat rcpp_hinge_boost_predict_prob(const arma::mat& beta, const arma::mat& x, const double lum_c);
RcppExport SEXP _abclass_rcpp_hinge_boost_predict_prob(SEXP betaSEXP, SEXP xSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_hinge_boost_predict_prob(beta, x, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hinge_boost_predict_y
arma::uvec rcpp_hinge_boost_predict_y(const arma::mat& beta, const arma::mat& x, const double lum_c);
RcppExport SEXP _abclass_rcpp_hinge_boost_predict_y(SEXP betaSEXP, SEXP xSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_hinge_boost_predict_y(beta, x, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_lum_predict_prob
arma::mat rcpp_lum_predict_prob(const arma::mat& beta, const arma::mat& x, const double lum_a, const double lum_c);
RcppExport SEXP _abclass_rcpp_lum_predict_prob(SEXP betaSEXP, SEXP xSEXP, SEXP lum_aSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_a(lum_aSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_lum_predict_prob(beta, x, lum_a, lum_c));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_lum_predict_y
arma::uvec rcpp_lum_predict_y(const arma::mat& beta, const arma::mat& x, const double lum_a, const double lum_c);
RcppExport SEXP _abclass_rcpp_lum_predict_y(SEXP betaSEXP, SEXP xSEXP, SEXP lum_aSEXP, SEXP lum_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_a(lum_aSEXP);
    Rcpp::traits::input_parameter< const double >::type lum_c(lum_cSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_lum_predict_y(beta, x, lum_a, lum_c));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_abclass_rcpp_boost_glasso", (DL_FUNC) &_abclass_rcpp_boost_glasso, 16},
    {"_abclass_rcpp_boost_net", (DL_FUNC) &_abclass_rcpp_boost_net, 16},
    {"_abclass_rcpp_hinge_boost_glasso", (DL_FUNC) &_abclass_rcpp_hinge_boost_glasso, 16},
    {"_abclass_rcpp_hinge_boost_net", (DL_FUNC) &_abclass_rcpp_hinge_boost_net, 16},
    {"_abclass_rcpp_logistic_glasso", (DL_FUNC) &_abclass_rcpp_logistic_glasso, 15},
    {"_abclass_rcpp_logistic_net", (DL_FUNC) &_abclass_rcpp_logistic_net, 15},
    {"_abclass_rcpp_lum_glasso", (DL_FUNC) &_abclass_rcpp_lum_glasso, 17},
    {"_abclass_rcpp_lum_net", (DL_FUNC) &_abclass_rcpp_lum_net, 17},
    {"_abclass_rcpp_logistic_predict_prob", (DL_FUNC) &_abclass_rcpp_logistic_predict_prob, 2},
    {"_abclass_rcpp_logistic_predict_y", (DL_FUNC) &_abclass_rcpp_logistic_predict_y, 2},
    {"_abclass_rcpp_boost_predict_prob", (DL_FUNC) &_abclass_rcpp_boost_predict_prob, 3},
    {"_abclass_rcpp_boost_predict_y", (DL_FUNC) &_abclass_rcpp_boost_predict_y, 3},
    {"_abclass_rcpp_hinge_boost_predict_prob", (DL_FUNC) &_abclass_rcpp_hinge_boost_predict_prob, 3},
    {"_abclass_rcpp_hinge_boost_predict_y", (DL_FUNC) &_abclass_rcpp_hinge_boost_predict_y, 3},
    {"_abclass_rcpp_lum_predict_prob", (DL_FUNC) &_abclass_rcpp_lum_predict_prob, 4},
    {"_abclass_rcpp_lum_predict_y", (DL_FUNC) &_abclass_rcpp_lum_predict_y, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_abclass(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
